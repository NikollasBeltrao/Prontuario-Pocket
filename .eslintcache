[{"C:\\Users\\beltr\\React JS\\prontuario\\src\\App.tsx":"1","C:\\Users\\beltr\\React JS\\prontuario\\src\\Header.tsx":"2","C:\\Users\\beltr\\React JS\\prontuario\\src\\Login\\LoginPage.tsx":"3","C:\\Users\\beltr\\React JS\\prontuario\\src\\index.tsx":"4","C:\\Users\\beltr\\React JS\\prontuario\\src\\routes.tsx":"5","C:\\Users\\beltr\\React JS\\prontuario\\src\\reportWebVitals.ts":"6","C:\\Users\\beltr\\React JS\\prontuario\\src\\Home\\HomePage.tsx":"7","C:\\Users\\beltr\\React JS\\prontuario\\src\\Register\\RegisterPage.tsx":"8","C:\\Users\\beltr\\React JS\\prontuario\\src\\Service\\firebase.ts":"9","C:\\Users\\beltr\\React JS\\prontuario\\src\\Service\\auth.ts":"10","C:\\Users\\beltr\\React JS\\prontuario\\src\\Service\\realtime.ts":"11","C:\\Users\\beltr\\React JS\\prontuario\\src\\medico\\Home.tsx":"12","C:\\Users\\beltr\\React JS\\prontuario\\src\\Service\\firestore.ts":"13","C:\\Users\\beltr\\React JS\\prontuario\\src\\paciente\\Home.tsx":"14","C:\\Users\\beltr\\React JS\\prontuario\\src\\Service\\apiImg.ts":"15","C:\\Users\\beltr\\React JS\\prontuario\\src\\cpfMask.ts":"16"},{"size":434,"mtime":1610917394894,"results":"17","hashOfConfig":"18"},{"size":1288,"mtime":1610998460559,"results":"19","hashOfConfig":"18"},{"size":5406,"mtime":1610999198422,"results":"20","hashOfConfig":"18"},{"size":480,"mtime":1609634632073,"results":"21","hashOfConfig":"18"},{"size":982,"mtime":1610760064677,"results":"22","hashOfConfig":"18"},{"size":425,"mtime":1609633898226,"results":"23","hashOfConfig":"18"},{"size":319,"mtime":1610917210534,"results":"24","hashOfConfig":"18"},{"size":15602,"mtime":1610999184558,"results":"25","hashOfConfig":"18"},{"size":731,"mtime":1610759533714,"results":"26","hashOfConfig":"18"},{"size":102,"mtime":1609789009828,"results":"27","hashOfConfig":"18"},{"size":118,"mtime":1609790196903,"results":"28","hashOfConfig":"18"},{"size":13235,"mtime":1610917297385,"results":"29","hashOfConfig":"18"},{"size":122,"mtime":1609789040001,"results":"30","hashOfConfig":"18"},{"size":12088,"mtime":1610917326517,"results":"31","hashOfConfig":"18"},{"size":159,"mtime":1610844574859,"results":"32","hashOfConfig":"18"},{"size":563,"mtime":1610914743805,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"w1qzex",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\beltr\\React JS\\prontuario\\src\\App.tsx",["76","77"],"import React from 'react';\nimport './App.css';\nimport Routes from './routes';\nimport db from './Service/firebase';\n\n// Add the Firebase services that you want to use\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n//<Header title='MyMedicalRecord'></Header>\nconst App: React.FC = (props) => {\n  interface User {\n    nome: string\n  }\n  \n  return (\n    <div className=\"app\">\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n",["78","79"],"C:\\Users\\beltr\\React JS\\prontuario\\src\\Header.tsx",[],"C:\\Users\\beltr\\React JS\\prontuario\\src\\Login\\LoginPage.tsx",["80"],"C:\\Users\\beltr\\React JS\\prontuario\\src\\index.tsx",[],["81","82"],"C:\\Users\\beltr\\React JS\\prontuario\\src\\routes.tsx",[],["83","84"],"C:\\Users\\beltr\\React JS\\prontuario\\src\\reportWebVitals.ts",[],["85","86"],"C:\\Users\\beltr\\React JS\\prontuario\\src\\Home\\HomePage.tsx",[],"C:\\Users\\beltr\\React JS\\prontuario\\src\\Register\\RegisterPage.tsx",["87","88","89","90"],"import React, { ChangeEvent, FormEvent, useState, useEffect } from 'react';\r\nimport './Register.css';\r\nimport '../Login/login.css'\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { BsArrowLeftShort, BsPlus } from 'react-icons/bs';\r\nimport auth from '../Service/auth';\r\nimport firestore from '../Service/firestore';\r\nimport cpfMask from \"../cpfMask\";\r\n\r\nconst Register: React.FC = (props) => {\r\n    const history = useHistory();\r\n    const [tipo, setTipo] = useState('');\r\n    const [form, setForm] = useState(false);\r\n    const [tab, setTab] = useState(0);\r\n    const [tabM, setTabM] = useState(0);\r\n    const [err, setErr] = useState('');\r\n    const [dataMedico, setDataMedico] = useState({\r\n        nome: '',\r\n        email: '',\r\n        foto: '',\r\n        senha: ''\r\n    });\r\n    const [confSenhaM, setConfSenhaM] = useState('');\r\n    const [dataPaciente, setDataPaciente] = useState({\r\n        cpf: '',\r\n        nome: '',\r\n        email: '',\r\n        senha: '',\r\n        tipoS: '',\r\n        foto: '',\r\n        dataN: ''\r\n\r\n    });\r\n\r\n    const [confSenhaP, setConfSenhaP] = useState('');\r\n\r\n    function handlerTipo(tipo: string) {\r\n        setTipo(tipo);\r\n        setForm(true);\r\n    }\r\n\r\n\r\n    async function handlerCadastrarPaciente(event: FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n        if (dataPaciente.email !== '' && dataPaciente.senha !== '' && confSenhaP !== '' && dataPaciente.nome !== ''\r\n            && dataPaciente.tipoS !== '' && dataPaciente.dataN !== '' && (confSenhaP === dataPaciente.senha)) {\r\n            setErr('');\r\n            await auth.createUserWithEmailAndPassword(dataPaciente.email, dataPaciente.senha)\r\n                .then(async (user) => {\r\n                    let dataUser = {\r\n                        cpf: dataPaciente.cpf,\r\n                        nome: dataPaciente.nome,\r\n                        email: dataPaciente.email,\r\n                        dataN: dataPaciente.dataN,\r\n                        tipoS: dataPaciente.tipoS,\r\n                        imagem: dataPaciente.foto,\r\n                        tipo: \"paciente\"\r\n                    }\r\n                    await firestore.collection('Paciente').doc(user?.user?.uid).set(dataUser)\r\n                        .then((res) => {\r\n                        })\r\n                        .catch((res) => {\r\n                            setErr('Falha ao cadastrar os dados');\r\n                        });\r\n                    await auth.signInWithEmailAndPassword(dataPaciente.email, dataPaciente.senha)\r\n                        .then(async (usera) => {\r\n                            let u = await auth.currentUser;\r\n                            await u?.updateProfile({\r\n                                displayName: dataPaciente.nome,\r\n                                photoURL: dataPaciente.foto\r\n                            }).then(function (a) {\r\n                                console.log(a)\r\n                                setErr(\"\");\r\n                                // Update successful.\r\n                            }).catch(function (error) {\r\n                                // An error happened.\r\n                            });\r\n                            localStorage.setItem('currentUser', JSON.stringify(usera));\r\n                            history.push('/paciente');\r\n                        })\r\n                        .catch((error) => {\r\n                            setErr('Falha ao fazer login');\r\n                        });\r\n                }, (err) => {\r\n                    if (err.code == \"auth/email-already-in-use\") {\r\n                        setErr('Esse email já está cadastrado');\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    setErr('Falha ao cadastrar os dados');\r\n                    // ..\r\n                });\r\n        }\r\n        else {\r\n            if (confSenhaP === dataPaciente.senha) {\r\n                setErr('Preencha todos os campos');\r\n            }\r\n            else {\r\n                setErr('As senhas devem ser iguais');\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function handlerLoginP(event: ChangeEvent<HTMLInputElement>) {\r\n        setDataPaciente({ ...dataPaciente, email: event.target.value });\r\n    }\r\n\r\n    function handlerNomeP(event: ChangeEvent<HTMLInputElement>) {\r\n        setDataPaciente({ ...dataPaciente, nome: event.target.value });\r\n    }\r\n\r\n    function handlerDataP(event: ChangeEvent<HTMLInputElement>) {\r\n        setDataPaciente({ ...dataPaciente, dataN: event.target.value });\r\n    }\r\n\r\n    function handlerTipoSP(event: ChangeEvent<HTMLSelectElement>) {\r\n        setDataPaciente({ ...dataPaciente, tipoS: event.target.value });\r\n    }\r\n\r\n    function handlerConfSenhaP(event: ChangeEvent<HTMLInputElement>) {\r\n        setConfSenhaP(event.target.value);\r\n    }\r\n\r\n    function handlerSenhaP(event: ChangeEvent<HTMLInputElement>) {\r\n        setDataPaciente({ ...dataPaciente, senha: event.target.value });\r\n        //await realtime.ref('User').set({\r\n        //    nome: event.target.value,\r\n        //});\r\n    }\r\n    function handleCpfP(event: ChangeEvent<HTMLInputElement>) {\r\n        setDataPaciente({ ...dataPaciente, cpf: cpfMask(event.target.value) })\r\n    }\r\n\r\n\r\n    async function handlerCadastrarMedico(event: FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n        if (dataMedico.email !== '' && dataMedico.senha !== '' && confSenhaM !== '' && dataMedico.nome !== ''\r\n            && (confSenhaM === dataMedico.senha)) {\r\n            setErr('');\r\n            await auth.createUserWithEmailAndPassword(dataMedico.email, dataMedico.senha)\r\n                .then(async (user) => {\r\n                    let dataUser = {\r\n                        nome: dataMedico.nome,\r\n                        email: dataMedico.email,\r\n                        tipo: 'medico'\r\n                    }\r\n                    await firestore.collection('Medico').doc(user?.user?.uid).set(dataUser)\r\n                        .then((res) => {\r\n                            console.log(res);\r\n                        })\r\n                        .catch((res) => {\r\n                            setErr('Falha ao cadastrar os dados');\r\n                        });\r\n                    await auth.signInWithEmailAndPassword(dataMedico.email, dataMedico.senha)\r\n                        .then(async (usera) => {\r\n                            let u = await auth.currentUser;\r\n                            await u?.updateProfile({\r\n                                displayName: dataMedico.nome,\r\n                                photoURL: dataMedico.foto\r\n                            }).then(function () {\r\n                                setErr(\"\");\r\n                                // Update successful.\r\n                            }).catch(function (error) {\r\n                                // An error happened.\r\n                            });\r\n\r\n                            localStorage.setItem('currentUser', JSON.stringify(usera));\r\n                            history.push('/medico');\r\n                        })\r\n                        .catch((error) => {\r\n                            setErr('Falha as fazer login');\r\n                        });\r\n                }, (err) => {\r\n                    if (err.code == \"auth/email-already-in-use\") {\r\n                        setErr('Esse email já está cadastrado');\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    setErr('Falha ao cadastrar os dados');\r\n                });\r\n        }\r\n        else {\r\n            if (confSenhaM === dataMedico.senha) {\r\n                setErr('Preencha todos os campos');\r\n            }\r\n            else {\r\n                setErr('As senhas devem ser iguais');\r\n            }\r\n        }\r\n    }\r\n    function handlerFotoM(event: ChangeEvent<HTMLInputElement>) {\r\n        setDataMedico({ ...dataMedico, foto: event.target.value });\r\n    }\r\n\r\n    function handlerFotoP(event: ChangeEvent<HTMLInputElement>) {\r\n        setDataPaciente({ ...dataPaciente, foto: event.target.value });\r\n    }\r\n    function handlerLoginM(event: ChangeEvent<HTMLInputElement>) {\r\n        setDataMedico({ ...dataMedico, email: event.target.value });\r\n    }\r\n\r\n    function handlerNomeM(event: ChangeEvent<HTMLInputElement>) {\r\n        setDataMedico({ ...dataMedico, nome: event.target.value });\r\n    }\r\n\r\n    function handlerConfSenhaM(event: ChangeEvent<HTMLInputElement>) {\r\n        setConfSenhaM(event.target.value);\r\n        if (dataMedico.senha.substr(0, event.target.value.length) !== event.target.value) {\r\n            setErr(\"As senhas devem ser iguais\");\r\n        }\r\n        else {\r\n            setErr(\"\");\r\n        }\r\n    }\r\n\r\n    function handlerSenhaM(event: ChangeEvent<HTMLInputElement>) {\r\n        setDataMedico({ ...dataMedico, senha: event.target.value });\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"register-container\">\r\n                {form ? <button className=\"voltar\" onClick={() => setForm(false)}><BsArrowLeftShort /></button> : ''}\r\n                <br/>\r\n                <h2>Bem vindo(a) ao Prontuário Pocket</h2>\r\n                {!form ? <img className=\"logo-inicio\" src=\"https://backend-analise.000webhostapp.com/favicon.ico\" alt=\"\" /> : ''}\r\n                {!form ? <div className=\"buttons-container\">\r\n                    <button onClick={() => handlerTipo('medico')}>Quero criar uma conta empresarial</button>\r\n                    <p>ou</p>\r\n                    <button onClick={() => handlerTipo('paciente')}>Quero criar uma conta pessoal</button>\r\n                </div> :\r\n                    <div className=\"form-container-register\">\r\n\r\n                        {tipo === 'paciente' ?\r\n                            <form onSubmit={handlerCadastrarPaciente} >\r\n                                {tab === 0 ?\r\n                                    <div className=\"form\">\r\n                                        <label htmlFor=\"nome\">* Nome</label>\r\n                                        <input id='nome' type=\"text\" onChange={handlerNomeP} value={dataPaciente.nome} placeholder=\"Seu nome\" />\r\n\r\n                                        <label htmlFor=\"email\">* E-mail</label>\r\n                                        <input id='email' type=\"email\" onChange={handlerLoginP} value={dataPaciente.email} placeholder=\"Seu E-mail\" />\r\n\r\n                                        <label htmlFor=\"datan\">* Data de nascimento</label>\r\n                                        <input id=\"datan\" type=\"date\" onChange={handlerDataP} value={dataPaciente.dataN} />\r\n\r\n                                        <label htmlFor=\"cpf\">* CPF</label>\r\n                                        <input id=\"cpf\" type=\"text\" maxLength={14} placeholder=\"000.000.000-00\" onChange={handleCpfP} value={dataPaciente.cpf} />\r\n\r\n                                        <div><button type=\"button\" className=\"proximo\" onClick={() => setTab(1)}>Proximo</button></div>\r\n                                    </div> :\r\n                                    <div className=\"form\">\r\n                                        <label htmlFor=\"ts\">* Tipo sanguineo</label>\r\n                                        <select id='ts' className=\"sel\" value={dataPaciente.tipoS} onChange={handlerTipoSP}>\r\n                                            <option value=\"\">Seu tipo sanguineo</option>\r\n                                            <option value=\"A+\">A+</option>\r\n                                            <option value=\"A-\">A-</option>\r\n                                            <option value=\"B+\">B+</option>\r\n                                            <option value=\"B-\">B-</option>\r\n                                            <option value=\"AB+\">AB+</option>\r\n                                            <option value=\"AB-\">Ab-</option>\r\n                                            <option value=\"O+\">O+</option>\r\n                                            <option value=\"O-\">O-</option>\r\n                                        </select>\r\n                                        <label htmlFor=\"senha\">* Senha</label>\r\n                                        <input id='senha' type=\"password\" onChange={handlerSenhaP} value={dataPaciente.senha} placeholder=\"Sua senha\" />\r\n\r\n                                        <label htmlFor=\"conf\">* Confirmar senha</label>\r\n                                        <input id='conf' type=\"password\" onChange={handlerConfSenhaP} value={confSenhaP} placeholder=\"Confirme a senha\" />\r\n\r\n                                        <label htmlFor=\"f\">Foto (url)</label>\r\n                                        <input id='f' type=\"text\" onChange={handlerFotoP} value={dataPaciente.foto} placeholder=\"Url\" />\r\n                                        <small>{err}</small>\r\n                                        <div>\r\n                                            <button type=\"button\" className=\"anterior\" onClick={() => setTab(0)}>Anterior</button>\r\n                                            <button className=\"proximo\" type='submit'>Cadastrar</button>\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                            </form> :\r\n                            <form onSubmit={handlerCadastrarMedico}>\r\n                                {tabM === 0 ?\r\n                                    <div className=\"form\">\r\n                                        <label htmlFor=\"nome\">* Nome</label>\r\n                                        <input id='nome' type=\"text\" onChange={handlerNomeM} value={dataMedico.nome} placeholder=\"Seu nome\" />\r\n\r\n                                        <label htmlFor=\"email\">* E-mail</label>\r\n                                        <input id='email' type=\"email\" onChange={handlerLoginM} value={dataMedico.email} placeholder=\"Seu E-mail\" />\r\n                                        <small>{err}</small>\r\n                                        <div><button type=\"button\" className=\"proximo\" onClick={() => setTabM(1)}>Proximo</button></div>\r\n                                    </div> :\r\n                                    <div className=\"form\">\r\n                                        <label htmlFor=\"senha\">* Senha</label>\r\n                                        <input id='senha' type=\"password\" onChange={handlerSenhaM} value={dataMedico.senha} placeholder=\"Sua senha\" />\r\n\r\n                                        <label htmlFor=\"conf\">* Confirmar senha</label>\r\n                                        <input id='conf' type=\"password\" onChange={handlerConfSenhaM} value={confSenhaM} placeholder=\"Confirme a senha\" />\r\n\r\n                                        <label htmlFor=\"f\">Foto (url)</label>\r\n                                        <input id='f' type=\"text\" onChange={handlerFotoM} value={dataMedico.foto} placeholder=\"Url\" />\r\n                                        <small>{err}</small>\r\n                                        <div>\r\n                                            <button type=\"button\" className=\"anterior\" onClick={() => setTabM(0)}>Anterior</button>\r\n                                            <button className=\"proximo\" type='submit'>Cadastrar</button>\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                            </form>\r\n                        }\r\n                    </div>\r\n                }\r\n                <Link className=\"link\" to=\"/\">Fazer login</Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Register;","C:\\Users\\beltr\\React JS\\prontuario\\src\\Service\\firebase.ts",[],["91","92"],"C:\\Users\\beltr\\React JS\\prontuario\\src\\Service\\auth.ts",[],"C:\\Users\\beltr\\React JS\\prontuario\\src\\Service\\realtime.ts",[],"C:\\Users\\beltr\\React JS\\prontuario\\src\\medico\\Home.tsx",["93","94"],"import firebase from 'firebase';\r\nimport React, { ChangeEvent, FormEvent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Header from '../Header';\r\nimport auth from '../Service/auth';\r\nimport firestore from '../Service/firestore';\r\nimport { VscFilePdf } from 'react-icons/vsc';\r\nimport api from '../Service/apiImg'\r\nimport cpfMask from \"../cpfMask\";\r\nimport './Medico.css';\r\n\r\ninterface Props {\r\n    user?: any,\r\n    page?: string\r\n}\r\n\r\n\r\nconst HomeMedico: React.FC<Props> = (props) => {\r\n    const history = useHistory();\r\n    let storage = localStorage.getItem('currentUser');\r\n    const [user, setUser] = useState(JSON.parse(storage ? storage : '{}'));\r\n    const [alterar, setAlterar] = useState(false);\r\n    const [err, setErr] = useState('');\r\n    const [pesquisa, setpesquisar] = useState(false);\r\n    const [novoUser, setNovoUser] = useState({\r\n        nome: user.user ? user.user.displayName : '',\r\n        email: user.user ? user.user.email : '',\r\n        novaSenha: '',\r\n        senha: ''\r\n    });\r\n    const [paciente, setPaciente] = useState({\r\n        uid: '',\r\n        codigo: \"\",\r\n        dataN: \"\",\r\n        email: \"\",\r\n        imagem: \"\",\r\n        nome: \"\",\r\n        tipo: \"\",\r\n        cpf: \"\"\r\n\r\n    });\r\n    const [exame, setExame] = useState({\r\n        arquivos: Array<File>(),\r\n        data: '',\r\n        desc: '',\r\n        medico: user.user.uid,\r\n        titulo: ''\r\n\r\n    });\r\n\r\n    const [loding, setLoding] = useState(false)\r\n    function handlerChange(event: ChangeEvent<HTMLInputElement>) {\r\n        setAlterar(true);\r\n        switch (event.target.id) {\r\n            case 'nome':\r\n                setNovoUser({ ...novoUser, nome: event.target.value });\r\n                break;\r\n            case 'novaSenha':\r\n                setNovoUser({ ...novoUser, novaSenha: event.target.value });\r\n                break;\r\n            case 'email':\r\n                setNovoUser({ ...novoUser, email: event.target.value });\r\n                break;\r\n            case 'senha':\r\n                setNovoUser({ ...novoUser, senha: event.target.value });\r\n                break;\r\n        }\r\n    }\r\n    async function handlerAlterar(event: FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n        if (novoUser.senha !== '') {\r\n            setErr(\"\");\r\n            await auth.signInWithEmailAndPassword(user.user.email, novoUser.senha)\r\n                .then(async res => {\r\n                    setLoding(true);\r\n                    let email = user.user.email;\r\n                    let senha = novoUser.senha;\r\n                    let u = await auth.currentUser;\r\n                    if (novoUser.nome !== '') {\r\n                        await firestore.collection(\"Medico\").doc(user.user.id).set({\r\n                            nome: novoUser.nome\r\n                        })\r\n                        await u?.updateProfile({\r\n                            displayName: novoUser.nome,\r\n                        }).then(function () {\r\n                            setErr(\"\");\r\n                            // Update successful.\r\n                        }).catch(function (error) {\r\n                            // An error happened.\r\n                        });\r\n                    }\r\n                    if (novoUser.email !== '') {\r\n                        await firestore.collection(\"Medico\").doc(user.user.id).set({\r\n                            email: novoUser.email\r\n                        })\r\n                        await u?.updateEmail(novoUser.email).then(function () {\r\n                            email = novoUser.email;\r\n                            setErr(\"\");\r\n                            // Update successful.\r\n                        }).catch(function (err) {\r\n                            // An error happened.\r\n                        });\r\n                    }\r\n                    if (novoUser.novaSenha !== '' && novoUser.novaSenha.length > 5) {\r\n                        await u?.updatePassword(novoUser.novaSenha).then(function () {\r\n                            senha = novoUser.novaSenha;\r\n                            setErr(\"\");\r\n                        }).catch(function (errr) {\r\n                            // An error happened.\r\n                        });\r\n                    }\r\n                    else if (novoUser.novaSenha !== '') {\r\n                        setErr(\"Senha inválida\");\r\n                    }\r\n\r\n                    await auth.signInWithEmailAndPassword(email, senha)\r\n                        .then(u => {\r\n                            setUser(u);\r\n                            if (err === '') {\r\n                                alert(\"Alterado com sucesso!\");\r\n                            }\r\n\r\n                            localStorage.setItem('currentUser', JSON.stringify(u));\r\n                        }).catch(console.error);\r\n                    setLoding(false);\r\n\r\n                }, (err) => {\r\n                    if (err) {\r\n                        if (err.code === 'auth/wrong-password') {\r\n                            setErr(\"Senha incorreta\");\r\n                        }\r\n                        else if (err.code === 'auth/user-not-found') {\r\n                            setErr(\"Usuário não encontrado\");\r\n                        }\r\n                    }\r\n                }).catch(console.error);\r\n\r\n        }\r\n        else {\r\n            setErr('Digite sua senha atual');\r\n        }\r\n\r\n    }\r\n\r\n    async function pesquisar(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        const e = event.target as HTMLInputElement;\r\n        e.value = cpfMask(e.value)\r\n        if (event.key === \"Enter\") {\r\n            await firestore.collection(\"Paciente\").where(\"cpf\", \"==\", e.value).get().then((res) => {\r\n                if (res?.docs[0]) {\r\n                    setPaciente({\r\n                        uid: res.docs[0].id,\r\n                        codigo: res.docs[0].data().codigo,\r\n                        dataN: res.docs[0].data().dataN,\r\n                        email: res.docs[0].data().email,\r\n                        imagem: res.docs[0].data().imagem,\r\n                        nome: res.docs[0].data().nome,\r\n                        tipo: res.docs[0].data().tipo,\r\n                        cpf: res.docs[0].data().cpf\r\n                    });\r\n                    setpesquisar(true);\r\n                }\r\n                else {\r\n                    setPaciente({\r\n                        uid: \"\",\r\n                        codigo: \"\",\r\n                        dataN: \"\",\r\n                        email: \"\",\r\n                        imagem: \"\",\r\n                        nome: \"\",\r\n                        tipo: \"\",\r\n                        cpf: ''\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n    async function addArquivo(event: ChangeEvent<HTMLInputElement>) {\r\n        const e = event.target as HTMLInputElement;\r\n\r\n        if (e.files && e.files[0]) {\r\n            setExame({ ...exame, arquivos: [...exame.arquivos, e.files[0]] })\r\n        }\r\n    }\r\n\r\n    async function enviarExame(event: FormEvent) {\r\n        event.preventDefault();\r\n        let e = event.target as HTMLInputElement;\r\n        let title = e.childNodes[3] as HTMLInputElement;\r\n        let message = e.childNodes[5] as HTMLInputElement;\r\n        let now = new Date();\r\n        let data = now.getDate() + \"/\" + (now.getMonth() + 1) + \"/\" + now.getFullYear();\r\n        setExame({\r\n            ...exame,\r\n            data: data,\r\n            desc: message.value,\r\n            titulo: title.value\r\n        });\r\n        let nAqrquivo = Array<string>();\r\n        await exame.arquivos.map((el) => {\r\n            nAqrquivo.push(\"https://backend-analise.000webhostapp.com/docs/\" + el.name);\r\n            let form = new FormData();\r\n            form.append(\"file\", el);\r\n\r\n            api.post(\"/\", form).then(res => {\r\n                console.log(res);\r\n            }).catch(console.error);\r\n        })\r\n        if (paciente.uid !== '') {\r\n            await firestore.collection(\"Paciente\").doc(paciente.uid).collection(\"consultas\").add({ ...exame, arquivos: nAqrquivo }).then(res => {\r\n                setExame({\r\n                    arquivos: Array<File>(),\r\n                    data: '',\r\n                    desc: '',\r\n                    medico: user.user.uid,\r\n                    titulo: ''\r\n                })\r\n                alert(\"Exame enviado\");\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    if (storage) {\r\n        return (\r\n            <>\r\n                <Header tipo=\"medico\" user={user.user ? user.user : {}} />\r\n                {props.page === undefined ?\r\n                    <div className=\"inicio\">\r\n                        <div className=\"list-container\">\r\n                            <div><input type=\"text\" maxLength={14} placeholder=\"Pesquisar\" onKeyPress={pesquisar} /></div>\r\n                            {pesquisa && paciente.nome !== '' && paciente.email !== '' ?\r\n                                <div className=\"paciente\">\r\n                                    <img src={paciente.imagem ? paciente.imagem : \"https://www.icirnigeria.org/wp-content/uploads/2018/07/noavatar.png\"} alt=\"\" />\r\n                                    <h2>{paciente.nome}</h2>\r\n                                    <p>{paciente.email}</p>\r\n\r\n                                    <form onSubmit={enviarExame}>\r\n                                        <input type=\"file\" name=\"file\" id=\"file\" accept=\".pdf\" onChange={addArquivo} />\r\n                                        <div className=\"lista-exames\">{exame.arquivos?.map((el, i) => {\r\n                                            return (\r\n                                                <li key={i}> <VscFilePdf className=\"icon-exames\" /> <p>{el.name}</p></li>\r\n                                            )\r\n                                        })\r\n                                        }</div>\r\n                                        <label htmlFor=\"t\">Tópico</label>\r\n                                        <input id=\"t\" type=\"text\" placeholder=\"Tópico\" />\r\n                                        <label htmlFor=\"m\">Menssagem</label>\r\n                                        <input id=\"m\" type=\"text\" placeholder=\"Menssagem\" />\r\n                                        <button type=\"submit\">Enviar</button>\r\n                                    </form>\r\n                                </div> : ''\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    : props.page === \"perfil\" ?\r\n                        <div className=\"todo-perfil-medico\">\r\n                            <div className=\"todo\">\r\n                                <div className=\"topo\">\r\n                                    <div className=\"top-div\">\r\n                                        <img src={user.user.photoURL ? user.user.photoURL : 'https://www.icirnigeria.org/wp-content/uploads/2018/07/noavatar.png'}\r\n                                            alt=\"Não foi possivel carregar a imagem\"\r\n                                            title=\"Perfil\" />\r\n                                    </div>\r\n                                    <div className=\"top-div\">\r\n                                        <h3>{user.user ? user.user.displayName : 'undefined'}</h3>\r\n                                        <p>{user.user ? user.user.email : ''}</p>\r\n                                    </div>\r\n\r\n                                </div>\r\n                                <div className=\"bot\">\r\n                                    <form onSubmit={handlerAlterar}>\r\n                                        <label htmlFor=\"nome\">Nome</label>\r\n                                        <input id=\"nome\" type=\"text\" onChange={handlerChange} value={novoUser.nome ? novoUser.nome : ''} placeholder=\"Nome\" />\r\n\r\n                                        <label htmlFor=\"email\">Email</label>\r\n                                        <input id=\"email\" type=\"email\" onChange={handlerChange} value={novoUser.email ? novoUser.email : ''} placeholder=\"E-mail\" />\r\n\r\n                                        <label htmlFor=\"novaSenha\">Alterar senha</label>\r\n                                        <input id=\"novaSenha\" type=\"password\" onChange={handlerChange} value={novoUser.novaSenha} placeholder=\"Nova senha\" />\r\n                                        <small>* A senha deve ter mais de 5 caracters</small>\r\n                                        <label htmlFor=\"senha\">Digite sua senha atual </label>\r\n                                        <input id=\"senha\" type=\"password\" onChange={handlerChange} value={novoUser.senha} placeholder=\"Senha atual\" disabled={!alterar} />\r\n\r\n                                        <small>{err}</small>\r\n                                        <div className={\"loader \" + (!loding ? \"none\" : \"flex\")} ></div>\r\n                                        <button type=\"submit\" disabled={!alterar} >Alterar</button>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div> : ''\r\n                }\r\n            </>\r\n        )\r\n    }\r\n    else {\r\n        return <div>Erro{history.push(\"/\")}</div>\r\n    }\r\n}\r\nexport default HomeMedico;\r\n\r\n","C:\\Users\\beltr\\React JS\\prontuario\\src\\Service\\firestore.ts",[],["95","96"],"C:\\Users\\beltr\\React JS\\prontuario\\src\\paciente\\Home.tsx",["97","98","99"],"C:\\Users\\beltr\\React JS\\prontuario\\src\\Service\\apiImg.ts",[],["100","101"],"C:\\Users\\beltr\\React JS\\prontuario\\src\\cpfMask.ts",[],{"ruleId":"102","severity":1,"message":"103","line":4,"column":8,"nodeType":"104","messageId":"105","endLine":4,"endColumn":10},{"ruleId":"102","severity":1,"message":"106","line":11,"column":13,"nodeType":"104","messageId":"105","endLine":11,"endColumn":17},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"102","severity":1,"message":"111","line":4,"column":28,"nodeType":"104","messageId":"105","endLine":4,"endColumn":34},{"ruleId":"107","replacedBy":"112"},{"ruleId":"109","replacedBy":"113"},{"ruleId":"107","replacedBy":"114"},{"ruleId":"109","replacedBy":"115"},{"ruleId":"107","replacedBy":"116"},{"ruleId":"109","replacedBy":"117"},{"ruleId":"102","severity":1,"message":"118","line":1,"column":51,"nodeType":"104","messageId":"105","endLine":1,"endColumn":60},{"ruleId":"102","severity":1,"message":"111","line":5,"column":28,"nodeType":"104","messageId":"105","endLine":5,"endColumn":34},{"ruleId":"119","severity":1,"message":"120","line":85,"column":34,"nodeType":"121","messageId":"122","endLine":85,"endColumn":36},{"ruleId":"119","severity":1,"message":"120","line":175,"column":34,"nodeType":"121","messageId":"122","endLine":175,"endColumn":36},{"ruleId":"107","replacedBy":"123"},{"ruleId":"109","replacedBy":"124"},{"ruleId":"102","severity":1,"message":"125","line":1,"column":8,"nodeType":"104","messageId":"105","endLine":1,"endColumn":16},{"ruleId":"126","severity":1,"message":"127","line":200,"column":39,"nodeType":"128","messageId":"129","endLine":200,"endColumn":41},{"ruleId":"107","replacedBy":"130"},{"ruleId":"109","replacedBy":"131"},{"ruleId":"102","severity":1,"message":"132","line":73,"column":17,"nodeType":"104","messageId":"105","endLine":73,"endColumn":33},{"ruleId":"133","severity":1,"message":"134","line":94,"column":8,"nodeType":"135","endLine":94,"endColumn":10,"suggestions":"136"},{"ruleId":"137","severity":1,"message":"138","line":218,"column":65,"nodeType":"139","endLine":218,"endColumn":80},{"ruleId":"107","replacedBy":"140"},{"ruleId":"109","replacedBy":"141"},"@typescript-eslint/no-unused-vars","'db' is defined but never used.","Identifier","unusedVar","'User' is defined but never used.","no-native-reassign",["142"],"no-negated-in-lhs",["143"],"'BsPlus' is defined but never used.",["142"],["143"],["142"],["143"],["142"],["143"],"'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["142"],["143"],"'firebase' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["142"],["143"],"'a' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'carregarConsultas', 'storage', and 'validar'. Either include them or remove the dependency array.","ArrayExpression",["144"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["142"],["143"],"no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},"Update the dependencies array to be: [carregarConsultas, storage, validar]",{"range":"147","text":"148"},[3062,3064],"[carregarConsultas, storage, validar]"]